<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Generating WSDL for an OTA web service</title>
</head>
<body class="composite">

<div id="bodycol">
<div class="app">
<div class="h3">

<p>WSDL service definitions are widely used to specify web services based on SOAP message
exchange. They're especially useful for client code generation, allowing potential service
consumers to easily generate code to access the service using their preferred web services
stack (such as .Net, Axis2, etc.). But WSDL is not really designed to be edited "by hand",
and even if you use one of the many available GUI tools to work with WSDL the process is
error-prone and tedious.</p>

<p>JiBX offers you an alternative approach to easily create WSDL service definitions. You
can use a <a href="%datamodel%">data model</a> generated by the JiBX CodeGen tool to define
a service interface in terms of Java methods, passing and returning instances of classes
corresponding to OTA messages. The Jibx2Wsdl tool, included in the JiBX distribution, can
then generate a WSDL service definition from the service interface. The resulting WSDL is
not JiBX-specific, and can be used for any implementation of the service.</p>

<p>The <i>webservice</i> directory of the JiBX/OTA distribution includes an Ant
<i>build.xml</i> and sample service code. The sample service code defines methods matching
all the OTA request-response message pairs relating to air travel. It uses the generated
OTA data model (either full, or modular) for the representation of the messages.</p>

</div>
<div class="h3">

<h3><a name="sample"></a>Sample service</h3>

<p>The source code for the provided sample service is the <code>org.ota.ws.AirService</code>
interface, in the <i>webservice/base/src</i> directory. This interface defines 13 methods,
each taking one of the OTA air request messages as input and returning the appropriate OTA
air response message. Here's a partial listing:

<div id="source"><pre>/**
 * OTA Air web service definition. This defines a method for each request/response pair
 * in the Air group.
 */
public interface AirService
{
    /**
     * Request flight availability for a city pair on a specific date for a specific
     * number and type of passengers.
     */
    AvailRS avail(AvailRQ req);
    
    /**
     * Book a specific itinerary for one or more identified passengers.
     */
    BookRS book(BookRQ req);
    
    /**
     * Modify a previously-booked itinerary for one or more identified passengers.
     */
    BookRS bookModify(BookModifyRQ req);
    ...
</pre></div>

<p>The service definition includes a JavaDoc describing the overall purpose of the service,
and each method definition includes a JavaDoc describing that particular method.</p>

<p>The actual class names used for the request and response message match those in the
"standard" data model examples. If you change the data model generation you may need to
change these classes.</p>


</div>
<div class="h3">

<h3><a name="generate"></a>Generating the WSDL</h3>

<p>Generating a WSDL service definition from the service interface uses this target from
the Ant <i>build.xml</i> script in the <i>webservice</i> directory:</p>

<div id="source"><pre>  &lt;!-- Generate bindings, schemas, and WSDL -->
  &lt;target name="generate-wsdl" depends="compile-base">
    &lt;delete quiet="true" dir="${basedir}/gen"/>
    &lt;echo message="Running Jibx2Wsdl tool"/>
    &lt;java classname="org.jibx.ws.wsdl.tools.Jibx2Wsdl" fork="true" failonerror="true">
      &lt;classpath>
        &lt;path refid="jibx-classpath"/>
        &lt;path refid="model-classpath"/>
      &lt;/classpath>
      &lt;arg value="-p"/>
      &lt;arg value="${basedir}/base/bin"/>
      &lt;arg value="-s"/>
      &lt;arg value="${basedir}/base/src"/>
      &lt;arg value="-t"/>
      &lt;arg value="${wsdlgen-dir}"/>
      &lt;arg value="-d"/>
      &lt;arg value="-u"/>
      &lt;arg value="classpath:/META-INF/binding.xml;${ota-schemas}/*.xsd"/>
      &lt;arg value="org.ota.ws.AirService"/>
    &lt;/java>
  &lt;/target>
</pre></div>

<p>This target invokes the JiBX Jibx2Wsdl tool, with the jar file(s) created from the
generated OTA data model on the classpath. The first arguments give the paths to the
binary class files directory and the source files directory for the service definition
code, along with the target directory for WSDL generation. Then the <code>-d</code> flag indicates this is a pure
doc/lit service (rather than the default "wrapped" style), meaning the methods in the
service definition each take a single parameter representing the input message and
directly return the output message. The <code>-u</code> flag and following value give
existing binding and schema definitions to be used for the service, in this case the
binding for the generated OTA data model and the corresponding OTA schemas. The last
argument is the actual service definition class.</p>

<p>To generate the WSDL service definition, just open a console to the <i>webservice</i>
directory and type <code>ant</code>. The output will be generated to the <i>webservice/gen</i>
directory.</p>


</div>
<div class="h3">

<h3><a name="generatedwsdl"></a>Generated WSDL</h3>

<p>The generated WSDL is named <i>AirService.wsdl</i>, with the name taken from the service
class (by default - this can easily be changed by using Jibx2Wsdl customizations). Since the
OTA messages used as input and output to the service need to be described in the WSDL, it
needs to incorporate the appropriate OTA schema definitions. This is done using &lt;xs:import>
schema references. All the necessary schemas (including those referenced indirectly) are
copied into the output directory with the generated WSDL so that the &lt;xs:import>s can
use local references. This makes it easy to package the contents of the directory for
distribution as a complete service definition.</p>

<p>Here's an edited version of the output WSDL:</p>

<div id="source"><pre>&lt;wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://ota.org/ws/AirService"
    xmlns:ns1="http://www.opentravel.org/OTA/2003/05"
    targetNamespace="http://ota.org/ws/AirService">
  &lt;wsdl:types>
    &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:tns="http://ota.org/ws/AirService"
        xmlns:ns1="http://www.opentravel.org/OTA/2003/05" elementFormDefault="qualified"
        targetNamespace="http://ota.org/ws/AirService">
      &lt;xs:import namespace="http://www.opentravel.org/OTA/2003/05"
          schemaLocation="OTA_AirBookRQ.xsd"/>
      &lt;xs:import namespace="http://www.opentravel.org/OTA/2003/05"
          schemaLocation="OTA_AirDemandTicketRQ.xsd"/>
      ...
    &lt;/xs:schema>
  &lt;/wsdl:types>
  &lt;wsdl:message name="availMessage">
    &lt;wsdl:part name="part" element="ns1:OTA_AirAvailRQ"/>
  &lt;/wsdl:message>
  ...
  &lt;wsdl:portType name="AirServicePortType">
    &lt;wsdl:documentation>OTA Air web service definition. This defines a method for
        each request/response pair in the Air group.&lt;/wsdl:documentation>
    &lt;wsdl:operation name="avail">
      &lt;wsdl:documentation>Request flight availability for a city pair on a specific
          date for a specific number and type of passengers.&lt;/wsdl:documentation>
      &lt;wsdl:input message="tns:availMessage"/>
      &lt;wsdl:output message="tns:availResponseMessage"/>
    &lt;/wsdl:operation>
    &lt;wsdl:operation name="book">
      &lt;wsdl:documentation>Book a specific itinerary for one or more identified
          passengers.&lt;/wsdl:documentation>
      &lt;wsdl:input message="tns:bookMessage"/>
      &lt;wsdl:output message="tns:bookResponseMessage"/>
    &lt;/wsdl:operation>
    &lt;wsdl:operation name="bookModify">
      &lt;wsdl:documentation>Modify a previously-booked itinerary for one or more
          identified passengers.&lt;/wsdl:documentation>
      &lt;wsdl:input message="tns:bookModifyMessage"/>
      &lt;wsdl:output message="tns:bookModifyResponseMessage"/>
    &lt;/wsdl:operation>
    ...
  &lt;/wsdl:portType>
  &lt;wsdl:binding name="AirServiceBinding" type="tns:AirServicePortType">
    &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
    &lt;wsdl:operation name="avail">
      &lt;soap:operation soapAction="urn:avail"/>
      &lt;wsdl:input>
        &lt;soap:body use="literal"/>
      &lt;/wsdl:input>
      &lt;wsdl:output>
        &lt;soap:body use="literal"/>
      &lt;/wsdl:output>
    &lt;/wsdl:operation>
    ...
  &lt;wsdl:service name="AirService">
    &lt;wsdl:port name="AirServicePort" binding="tns:AirServiceBinding">
      &lt;soap:address location="http://localhost:8080/axis2/services/AirService"/>
    &lt;/wsdl:port>
  &lt;/wsdl:service>
&lt;/wsdl:definitions>
</pre></div>

<p>As you can see from the listing, Jibx2Wsdl copies the JavaDoc documentation from the
service class and service methods into the appropriate points in the WSDL. This is not
a requirement for WSDL, but it makes it much easier for users of the service to understand
the functionality being provided.</p>

<p>The &lt;wsdl:service> element (near the bottom of the listing) includes the location
where the service can be accessed. By default this is just generated as for a service
deployed to the Axis2 web services stack running on the local system. You can change the
location value by using Jibx2Wsdl customizations, or just edit the generated WSDL and
change the value as appropriate.</p>

</div>
</div>
</div>

</body>
</html>
