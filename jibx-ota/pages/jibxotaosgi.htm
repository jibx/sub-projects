<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>JiBX/OTA OSGi Module Packaging project</title>
</head>
<body class="composite">

<div id="bodycol">
<div class="app">
<div class="h3">

<p>The JiBX/OTA OSGi Module Packaging project simplifies programming with the <a href="http://www.opentravel.org">Opentravel Alliance</a>
schema.</p>

<p>To use these modules in your project, just include them in your maven pom file:</p>
<p><code>
    &lt;dependency&gt;<br/>
      &nbsp;&nbsp;&lt;groupId&gt;org.jibx.ota.osgi&lt;/groupId&gt;<br/>
      &nbsp;&nbsp;&lt;artifactId&gt;jibx-ota-osgi-hotel&lt;/artifactId&gt;<br/>
      &nbsp;&nbsp;&lt;version&gt;1.2.3&lt;/version&gt;<br/>
    &lt;/dependency&gt;<br/>
</code></p>

<p>...and start programming. That's it! All the required libraries are automatically included in your project.</p>

<p>Typically, when you use a tool to bind java code to a schema you:<br/>
1. Download the schema from the web site.<br/>
2. Decide whether to bind the entire schema and have a huge module or just bind the schema you need and run the risk of having to redo the process if you add messages.<br/>
3. Configure your binding tool to use the schema.<br/>
4. Run the binding tool and (usually) tweek the configuration until it works.<br/>
5. Deploy the modules with your project (usually your war/ear file).<br/>
</p>

<p>The JiBX/OTA OSGi Module Packaging project simplifies this process by doing all of this for you:<br/>
- The entire schema is already setup and packaged in modules.<br/>
- Only the modules you need are (automatically) included in your deployment.<br/>
- Only the modules you use are loaded.<br/>
</p>

<p>For a quick demonstration of what this project does, build a sample project by typing:<br/>
(The backslashes just break up this really long command line)</p>

<p><code>
mvn archetype:generate -DarchetypeGroupId=org.jibx.ota.osgi \<br/>
-DarchetypeArtifactId=jibx-ota-osgi-archetype -DarchetypeVersion=1.2.3-SNAPSHOT \<br/>
-DgroupId=com.company.ota -DartifactId=my-artifact -Dversion=1.0.0 \<br/>
-Dpackage=com.company.ota -Dtravel-segment=hotel -DinteractiveMode=false<br/>
<br/>
Then, build and run your new project:<br/>
cd my-artifact    ('dir my-artifact' for windows users)<br/>
mvn package<br/>
mvn exec:java<br/>
</code></p>

<p>If you are using a IDE such as eclipse, the source code and documentation are automatically loaded also.</p>

<p>Now take a look at the source code in your new project. This sample program creates a hotel message using
normal java classes. It then converts the objects to an xml message and displays it. Next, this xml message
is converted back to a java object and some data is extracted and displayed.</p>

<p>The cool things about this project are:<br/>
1. It's easy to get started (no downloading schema, binding, etc)<br/>
2. Only the code you need will be included in your war/distribution file. (Maven takes care of this)<br/>
3. Only the code you use will be loaded by java (If you use osgi. If not, it still works fine)<br/></p>

<p>So if your code creates a HotelAvailablility message, the hotel, profile, air, vehicle, and base schemas will be
included in your war file (just in case). The rest of the opentravel schema is not needed, so it is not included.
Only the parts of the schema that will be used are loaded in your runtime. When you decide to start creating
messages for rail, only the required modules will be added to your project.</p>

</div>
</div>
</div>

</body>
</html>
